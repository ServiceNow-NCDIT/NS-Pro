<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_g_sonc_ns_pro.core_nspro_ajax</api_name>
        <caller_access/>
        <client_callable>true</client_callable>
        <description/>
        <name>core_nspro_ajax</name>
        <script><![CDATA[var core_nspro_ajax = Class.create();
core_nspro_ajax.prototype = Object.extendsObject(global.AbstractAjaxProcessor, {

    getDaysFromToday: function() {

        var core = new x_g_sonc_ns_pro.core_nspro();
        var days = this.getParameter('sysparm_days');
        return core.getDaysFromToday(days);

    },

    getDaysFromDate: function() {

        gs.info('calling core_nspro_ajax.getDaysFromDate');

        var core = new x_g_sonc_ns_pro.core_nspro();
        var date = this.getParameter('sysparm_date');
        var days = this.getParameter('sysparm_days');
        return core.getDaysFromDate(date, days);

    },

    getdefaultNeedByDate: function() {
        var change_type;
        var defaultDate;
        var core = new x_g_sonc_ns_pro.core_nspro();
        var created_on = this.getParameter('sysparm_created_on');
        var request_type = this.getParameter('sysparm_request_type');
        if (request_type == 'change') {
            change_type = this.getParameter('sysparm_change_type');
        }
        var lead_time = 120; // default to 120 days for new services, 45 for changes
        if (request_type == 'change') {
            lead_time = 45;

            if (change_type == 'add_ha' || change_type == 'wan_service_change' || change_type == 'wan_routing_change') {
                lead_time = 120;
            }

        }

        //gs.info('core_nspro_ajax.getdefaultNeedByDate \ncreated_on = ' + created_on + '\nrequest_type = '  + request_type + '\nchange_type = ' + change_type + '\nlead_time = ' + lead_time);
        if (created_on != '') {
            defaultDate = core.getDaysFromDate(created_on, lead_time);
        } else {
            defaultDate = core.getDaysFromToday(lead_time);
        }

        //gs.info('core_nspro_ajax.getdefaultNeedByDate \ndefaultDate = ' + defaultDate);

        return defaultDate;
    },

    requiresJustification: function() {
        var change_type;
        var core = new x_g_sonc_ns_pro.core_nspro();
        var new_date = this.getParameter('sysparm_new_date');
        var created_on = this.getParameter('sysparm_created_on');
        var request_type = this.getParameter('sysparm_request_type');
        if (request_type == 'change') {
            change_type = this.getParameter('sysparm_change_type');
        }

        // gs.info('core_nspro_ajax.requiresJustification \nnew_date = ' + new_date + '\ncreated_on = ' + created_on + '\nrequest_type of ' + request_type);
        var result = core.requiresJustification(new_date, created_on, request_type, change_type);
        // gs.info('core_nspro_ajax.requiresJustification result = ' + result);
        return result;

    },
    validateIpRange: function() {
        var startingIP;
        var endingIP;
        var netHelper = new global.networkHelper();
        startingIP = this.getParameter('sysparm_startingIP');
        endingIP = this.getParameter('sysparm_endingIP');
        var response = netHelper.validateIPAddressRange(startingIP, endingIP);
        return response;

    },
    validateIPInput: function() {
        var returnObj = {};

        var startingIP;
        var endingIP;
        var netHelper = new global.networkHelper();
        startingIP = this.getParameter('sysparm_startingIP');
        endingIP = this.getParameter('sysparm_endingIP');
        var validateResponse = netHelper.validateIPAddressRange(startingIP, endingIP);
        returnObj.validate = validateResponse;
        if (validateResponse == "valid") {
            var IpsInRange = netHelper.getTotalIpsForRange(startingIP, endingIP);
            var VLansInRange = netHelper.numberOfVLansInRange(startingIP, endingIP);
            returnObj.totalIPs = IpsInRange;
            returnObj.totalVlans = VLansInRange;
        }

        return JSON.stringify(returnObj);
    },
	validateVLanInput: function(){
		var returnObj = {};

		var startingVLan;
		var endingVLan;
		var startingIPAddress;
		
		startingVLan = this.getParameter('sysparm_startingVLan');
		endingVLan = this.getParameter('sysparm_endingVLan');
		startingIPAddress = this.getParameter('sysparm_startingIP');
		

	},
    getIPsForRange: function() {
        var startingIP;
        var endingIP;
        var netHelper = new global.networkHelper();
        startingIP = this.getParameter('sysparm_startingIP');
        endingIP = this.getParameter('sysparm_endingIP');
        var response = netHelper.getTotalIpsForRange(startingIP, endingIP);
        return response;
    },
    getVLansForRange: function() {
        var startingIP;
        var endingIP;
        var incrementIP = 4;
        var netHelper = new global.networkHelper();
        startingIP = this.getParameter('sysparm_startingIP');
        endingIP = this.getParameter('sysparm_endingIP');
        var response = netHelper.numberOfVLansInRange(startingIP, endingIP, incrementIP);
        return response;
    },
    type: 'core_nspro_ajax'
});]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>wbbusby</sys_created_by>
        <sys_created_on>2023-11-02 12:39:06</sys_created_on>
        <sys_id>2bca8dcd1bda3114824752c1604bcbd0</sys_id>
        <sys_mod_count>24</sys_mod_count>
        <sys_name>core_nspro_ajax</sys_name>
        <sys_package display_value="NS Pro" source="x_g_sonc_ns_pro">b5683ae81b157110824752c1604bcbc0</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="NS Pro">b5683ae81b157110824752c1604bcbc0</sys_scope>
        <sys_update_name>sys_script_include_2bca8dcd1bda3114824752c1604bcbd0</sys_update_name>
        <sys_updated_by>admglfry</sys_updated_by>
        <sys_updated_on>2024-08-15 20:00:44</sys_updated_on>
    </sys_script_include>
</record_update>
