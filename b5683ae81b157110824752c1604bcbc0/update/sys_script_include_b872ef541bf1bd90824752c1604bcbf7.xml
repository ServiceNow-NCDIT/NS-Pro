<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_g_sonc_ns_pro.core_nspro</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>core_nspro</name>
        <script><![CDATA[var core_nspro = Class.create();
core_nspro.prototype = {
    initialize: function() {},

    getDaysFromToday: function(days) {

        var gd = new GlideDate();
		gd.addDaysLocalTime(days);
		return gd.getDisplayValue();

    },
	
	getDaysFromDate: function(date, days) {
		
		var gd = new GlideDate();
		gd.setValue(date);
		gd.addDaysLocalTime(days);
	
		// gs.info('getDaysFromDate returning ' + gd);
		
		return gd;
		
	},
	
	isBeforeGracePeriod: function(new_date, created_on, request_type) {
		
		var nd = new GlideDate();		
		var td = new_date.split('/');
		gs.info('td = ' + td[2] + '-' + td[0] + '-' + td[1]);
		nd.setValue(td[2] + '-' + td[0] + '-' + td[1]);

		gs.info('core_nspro.isBeforeGracePeriod \nnew_date = ' + new_date + '\nnd = ' + nd + '\ncreated_on = ' + created_on + '\nrequest_type = ' + request_type);
		
		// calculate original due date based on request type and sys_created on
		var delta = 120; // default to 120 days for new services, 90 for changes
		if (request_type == 'Change') delta = 90;

		var due_date = new GlideDate();
		//gs.info('due_date set value = ' + this.getDaysFromDate(created_on, delta));
		due_date.setValue(this.getDaysFromDate(created_on, delta));
		//gs.info('due_date = ' + due_date);

		var grace_date = new GlideDate();
		//gs.info('grace_date set value = ' + this.getDaysFromDate(due_date, -15));

		grace_date.setValue(this.getDaysFromDate(due_date, -15)); // circuit due date is planned due date - 15 days
		//gs.info('grace_date = ' + grace_date);

		gs.info('core_nspro.isBeforeGracePeriod \ndue_date = ' + due_date + '\ngrace_date = ' + grace_date);
		
		if (nd.getValue() < grace_date.getValue()) {
			gs.info('core_nspro.isBeforeGracePeriod returning true');
			return true;
		}
		else {
			gs.info('core_nspro.isBeforeGracePeriod returning false');
			return false;
		}

	},


    type: 'core_nspro'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>wbbusby</sys_created_by>
        <sys_created_on>2023-10-06 19:14:59</sys_created_on>
        <sys_id>b872ef541bf1bd90824752c1604bcbf7</sys_id>
        <sys_mod_count>101</sys_mod_count>
        <sys_name>core_nspro</sys_name>
        <sys_package display_value="NS Pro" source="x_g_sonc_ns_pro">b5683ae81b157110824752c1604bcbc0</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="NS Pro">b5683ae81b157110824752c1604bcbc0</sys_scope>
        <sys_update_name>sys_script_include_b872ef541bf1bd90824752c1604bcbf7</sys_update_name>
        <sys_updated_by>wbbusby</sys_updated_by>
        <sys_updated_on>2024-03-26 12:47:49</sys_updated_on>
    </sys_script_include>
</record_update>
