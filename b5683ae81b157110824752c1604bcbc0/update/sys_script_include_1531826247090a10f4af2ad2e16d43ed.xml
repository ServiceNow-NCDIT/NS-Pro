<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_g_sonc_ns_pro.telco</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>telco</name>
        <script><![CDATA[var telco = Class.create();
telco.prototype = {
    initialize: function() {
        this.debug = true;
    },

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    timestamp: function() {
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        return new GlideDateTime().getNumericValue();
    },

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    getProvider : function (NSProTask, pri, ignoreTelco = '') {
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    
        var LogPrefix = " telco().getProvider --> ";
        var zip = NSProTask.location.zip.substring(0,5); // if zip is longer than 5, trim it to 5 chars so we can use it for looking up in table
		var cat = NSProTask.network_service_category;

		if (this.debug) gs.info(this.timestamp() + LogPrefix + ' executing');
        if (this.debug) gs.info(this.timestamp() + LogPrefix + ' trimmed zip is ' + zip);
		if (this.debug) gs.info(this.timestamp() + LogPrefix + ' cat is ' + cat);
		
		
		var provider = {};
		provider.success = false;
		provider.message = 'No provider found in x_g_sonc_ns_pro_telco_selection_by_zip';
		provider.sys_id = '';
		provider.poc = '';
		provider.email = '';
		var gr = new GlideRecord('x_g_sonc_ns_pro_telco_selection_by_zip');
		gr.addQuery('zip', zip);
		gr.addQuery('priority', pri);
		gr.addQuery('service_category', cat);
// 		if (ignoreTelco != '') {
// 			gr.addQuery('telco_provider', "!=", ignoreTelco);
// 		}
		gr.setLimit(1);
		gr.query();
		while (gr.next()) {
			// if (this.debug) gs.info(this.timestamp() + LogPrefix + 'found x_g_sonc_ns_pro_telco_selection_by_zip');
			var grProvider = new GlideRecord('x_g_sonc_ns_pro_telco_provider');
			grProvider.get(gr.telco_provider.toString());
			provider.success = true;
			provider.sys_id = grProvider.getUniqueValue();
			provider.poc = grProvider.getValue('poc_primary_name');
			provider.email = grProvider.getValue('order_email');
			provider.message = 'Provider = ' + grProvider.name;
		}
		if (this.debug) gs.info(this.timestamp() + LogPrefix + 'provider = ' + JSON.stringify(provider));
		return JSON.stringify(provider);

    },

    type: 'telco'
};


]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>wbbusby</sys_created_by>
        <sys_created_on>2024-03-23 01:20:56</sys_created_on>
        <sys_id>1531826247090a10f4af2ad2e16d43ed</sys_id>
        <sys_mod_count>49</sys_mod_count>
        <sys_name>telco</sys_name>
        <sys_package display_value="NS Pro" source="x_g_sonc_ns_pro">b5683ae81b157110824752c1604bcbc0</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="NS Pro">b5683ae81b157110824752c1604bcbc0</sys_scope>
        <sys_update_name>sys_script_include_1531826247090a10f4af2ad2e16d43ed</sys_update_name>
        <sys_updated_by>wbbusby</sys_updated_by>
        <sys_updated_on>2024-04-14 07:10:55</sys_updated_on>
    </sys_script_include>
</record_update>
