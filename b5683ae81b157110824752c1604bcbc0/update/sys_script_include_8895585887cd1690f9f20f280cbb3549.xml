<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_g_sonc_ns_pro.core_nspro_conditions</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>core_nspro_conditions</name>
        <script><![CDATA[var core_nspro_conditions = Class.create();
core_nspro_conditions.prototype = {
    initialize: function() {},
    newCreateNSProTasks: function(current) {
        var answer = false;

        if (current.getValue('task_type') == 'provisioning' && currrent.getValue('type_request') == 'New Service') {
            answer = true;
        }
        return answer;
    },
    selectTelcoProvisionTask: function(current) {
        var answer = false;
        if (current.getValue('task_type') == 'provisioning' && current.getValue('network_service_category') != null && current.getValue('site') != null) {
            answer = true;
        }
        return answer;
    },
    createTemporaryCircuit: function(current) {
        var answer = false;
        taskSysID = RP.getParameterValue('sys_id');
        var fieldName = 'circuit';
        var circuitValue = this._getTaskFieldValue(taskSysID, fieldName);

        gs.info('circuit Value is = ' + circuitValue);

        if (circuitValue) {
            if (RP.isRelatedList() && RP.getReferringURL().indexOf("x_g_sonc_ns_pro_nspro_tasks.do") == 0 && RP.getEncodedQuery().indexOf('table=cmdb_site') < 0 && RP.getEncodedQuery().indexOf('table=circuit') && RP.getEncodedQuery().indexOf('table=x_g_sonc_ns_pro_telco_provider')) {
                answer = true;
            }
        }
        return answer;
    },
    specialInstructionsBanner: function(current) {
        answer = false;
        if (current.isNewRecord()) {
            var taskType = current.getValue('task_type');
            var bannerMessage;
            switch (taskType) {
                case NSPROConstants.TASK_TYPES.FIELDSERVICES:
                    bannerMessage = NSPROConstants.TASK_BANNERMESSAGES.BEGINBANNER + NSPROConstants.TASK_BANNERMESSAGES.NEWFIELDSERVICES + NSPROConstants.TASK_BANNERMESSAGES.ENDBANNER;
                    break;
                case NSPROConstants.TASK_TYPES.ENTERPRISEMONITORING:
                    bannerMessage = NSPROConstants.TASK_BANNERMESSAGES.BEGINBANNER + NSPROConstants.TASK_BANNERMESSAGES.NEWENTERPRISEMONITORING + NSPROConstants.TASK_BANNERMESSAGES.ENDBANNER;
                    break;
                case NSPROConstants.TASK_TYPES.PROVISIONING:
                    bannerMessage = NSPROConstants.TASK_BANNERMESSAGES.BEGINBANNER + NSPROConstants.TASK_BANNERMESSAGES.NEWPROVISIONINGREQUEST + NSPROConstants.TASK_BANNERMESSAGES.ENDBANNER;
                    break;
                case NSPROConstants.TASK_TYPES.BILLING:
                    bannerMessage = NSPROConstants.TASK_BANNERMESSAGES.BEGINBANNER + NSPROConstants.TASK_BANNERMESSAGES.NEWBILLINGREQUEST + NSPROConstants.TASK_BANNERMESSAGES.ENDBANNER;
                    break;
                case NSPROConstants.TASK_TYPES.GENERIC:
                    bannerMessage = NSPROConstants.TASK_BANNERMESSAGES.BEGINBANNER + NSPROConstants.TASK_BANNERMESSAGES.NEWGENERICREQUEST + NSPROConstants.TASK_BANNERMESSAGES.ENDBANNER;
                    break;

            }
            if (bannerMessage) {
                answer = true;
                gs.addInfoMessage(bannerMessage);
            }

        }
        return answer;
    },
    _getTaskFieldValue: function(taskSysID, fieldName) {
        var returnFieldValue;
        var taskRecord = new GlideRecord('x_g_sonc_ns_pro_nspro_tasks');
        if (taskRecord.get(taskSysID)) {
            returnFieldValue = taskRecord.getValue(fieldName);
        }
        return returnFieldValue;
    },
    type: 'core_nspro_conditions'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admglfry</sys_created_by>
        <sys_created_on>2024-09-30 13:54:50</sys_created_on>
        <sys_id>8895585887cd1690f9f20f280cbb3549</sys_id>
        <sys_mod_count>31</sys_mod_count>
        <sys_name>core_nspro_conditions</sys_name>
        <sys_package display_value="NS Pro" source="x_g_sonc_ns_pro">b5683ae81b157110824752c1604bcbc0</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="NS Pro">b5683ae81b157110824752c1604bcbc0</sys_scope>
        <sys_update_name>sys_script_include_8895585887cd1690f9f20f280cbb3549</sys_update_name>
        <sys_updated_by>admglfry</sys_updated_by>
        <sys_updated_on>2024-10-04 13:51:39</sys_updated_on>
    </sys_script_include>
</record_update>
